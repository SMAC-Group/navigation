% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.navigation.R
\name{plot.navigation}
\alias{plot.navigation}
\title{plot.navigation}
\usage{
\method{plot}{navigation}(
  x,
  true_col = "#2980b9",
  col_fused_trans = "#EA5D0073",
  col_fused_full = "#EA5D00FF",
  plot_mean_traj = TRUE,
  plot_baro = TRUE,
  baro_col = "black",
  emu_to_plot = 1,
  plot3d = TRUE,
  plot_CI = FALSE,
  time_interval = 5,
  col_50 = "#E74C3C4D",
  col_95 = "#F5B0414D",
  col_50_brd = "#E74C3C",
  col_95_brd = "#F5B041",
  error_analysis = TRUE,
  emu_for_covmat = 1,
  nsim = 1000,
  col_traj_error = "#1C12F54D",
  time_interval_simu = 0.5,
  ...
)
}
\arguments{
\item{x}{A \code{navigation} object}

\item{true_col}{The color of the true trajectory}

\item{col_fused_trans}{The color of the emulated trajectories}

\item{col_fused_full}{The color of the mean trajectory of the emulated trajectories}

\item{plot_mean_traj}{A bolean indicating whether or not to plot the mean mean trajectory of the emulated trajectories. Default is \code{True}}

\item{plot_baro}{A boolean indicating whether or not to plot the barometer datapoint in tha Up coordinates plot. Default is \code{True}}

\item{baro_col}{The color of the barometer datapoints}

\item{emu_to_plot}{The emulated trajectory for which to plot confidence ellipses on the North-East coordinates plot}

\item{plot3d}{A boolean indicating whether or not to plot the 3d plot of the trajectory}

\item{plot_CI}{A boolean indicating whether or not to plot the confidence intervals for both 2d plots}

\item{time_interval}{A value in seconds indicating the interval at which to plot the CI on the North-East coordinates plot}

\item{col_50}{The color for the 50\% confidence intervals.}

\item{col_95}{The color for the 95\% confidence intervals.}

\item{col_50_brd}{The color for the 50\% confidence intervals borders.}

\item{col_95_brd}{The color for the 95\% confidence intervals.}

\item{error_analysis}{A boolean indicating whether or not to display an error analysis plot of the emulated trajectories}

\item{emu_for_covmat}{The emulated trajectory for which to use the var-cov matrix in order to simulate data and compute the CI of the error}

\item{nsim}{An integer indicating the number of trajectories simulated in order to compute the CI}

\item{col_traj_error}{The color for the trajectory estimation error}

\item{time_interval_simu}{time interval simu}

\item{...}{additional plotting argument}
}
\description{
This function enables the vizualisation of a \code{navigation} object, both in 2d and in 3d. The function therefore enables
the comparison of the true trajectory with emulated trajectories. One can also plot the analysis of the error of the trajectories
by comparing the \code{L2} norm of the difference between emulated trajectories and the true trajectory over time.
}
\examples{
\dontrun{
#Load trajectory
load("example0.RData")
traj = make_trajectory(data = traj, system = "ned")

# Monte-Carlo settings----------------------------
num.runs = 15

# Timing and sampling frequencies-----------------
timing = make_timing(nav.start     = 0,
                     nav.end       = 50,
                     freq.imu      = 10,
                     freq.gps      = 1,
                     freq.baro     = .5,
                     gps.out.start = 25,
                     gps.out.end   = 45)

# sensor model for data generation----------------
snsr.mdl=list()

imu.freq = 250
acc.mdl = WN(sigma2 = 1.535466e-04) + RW(gamma2 = 1.619511e-10) + DR(omega = 1.276475e-08)
gyr.mdl = WN(sigma2 = 1.711080e-03) + RW(gamma2 = 1.532765e-13)
snsr.mdl$imu = make_sensor(name="imu", 
 frequency=imu.freq,
 error_model1=acc.mdl,
 error_model2=gyr.mdl)

gps.freq = 1
gps.mdl.pos.hor = WN(sigma2 = 2^2)
gps.mdl.pos.ver = WN(sigma2 = 4^2)
gps.mdl.vel.hor = WN(sigma2 = 0.04^2)
gps.mdl.vel.ver = WN(sigma2 = 0.06^2)
snsr.mdl$gps = make_sensor(name="gps", frequency=gps.freq,
                           error_model1=gps.mdl.pos.hor,
                           error_model2=gps.mdl.pos.ver,
                           error_model3=gps.mdl.vel.hor,
                           error_model4=gps.mdl.vel.ver)
baro.freq = 1
baro.mdl = WN(sigma2=0.5^2)
snsr.mdl$baro = make_sensor(name="baro", frequency=baro.freq, error_model1=baro.mdl)

# sensor model for the KF------------------------
KF.mdl = list()

KF.mdl$imu  = snsr.mdl$imu
KF.mdl$gps  = snsr.mdl$gps
KF.mdl$baro = snsr.mdl$baro

# create navigation object------------------------
x = navigation(traj.ref = traj,
               timing = timing,
               snsr.mdl = snsr.mdl,
               KF.mdl = KF.mdl,
               num.runs = num.runs)

# plot navigation object------------------------
plot(x, plot3d = T, 
time_interval = 1, 
emu_for_covmat = 1, 
plot_mean_traj = F,
 plot_CI = T,
  nsim = 1000)

}
}
\author{
Stephane Guerrier, Mehran Khaghani & Lionel Voirol
}
