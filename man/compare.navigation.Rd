% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare.navigation.R
\name{compare.navigation}
\alias{compare.navigation}
\title{Compare multiple \code{navigation} objects}
\usage{
compare.navigation(
  ...,
  nsim = 100,
  emu_for_covmat = 1,
  col_50 = "#E74C3C4D",
  col_95 = "#F5B0414D",
  col_50_brd = "#E74C3C",
  col_95_brd = "#F5B041",
  col_traj_error = "#1C12F54D",
  time_interval_simu = 1
)
}
\arguments{
\item{...}{\code{navigation} objects to be compared.}

\item{nsim}{An integer indicating the number of trajectories simulated in order to compute the CI}

\item{emu_for_covmat}{The emulated trajectory for which to use the var-cov matrix in order to simulate data and compute the CI of the error}

\item{col_50}{The color for the 50\% confidence intervals.}

\item{col_95}{The color for the 95\% confidence intervals.}

\item{col_50_brd}{The color for the 50\% confidence intervals borders.}

\item{col_95_brd}{The color for the 95\% confidence intervals.}

\item{col_traj_error}{The color of the \code{L2} norm of errors of the emulated trajectories.}

\item{time_interval_simu}{A value in second indicating the interval at which are simulated trajectories in order to compute the CI}
}
\description{
Comparison of error analysis plot for different trajectories
}
\author{
Davide Cucci, Lionel Voirol, Mehran Khaghani, St√©phane Guerrier
# Load trajectory
data(example_1_traj_ned)
traj <- make_trajectory(data = example_1_traj_ned, system = "ned")
# Monte-Carlo settings----------------------------
num.runs <- 10
# Timing and sampling frequencies-----------------
timing <- make_timing(
  nav.start = 0,
  nav.end = 50,
  freq.imu = 10,
  freq.gps = 1,
  freq.baro = .5,
  gps.out.start = 25,
  gps.out.end = 45
)
# sensor model for data generation----------------
snsr.mdl <- list()
imu.freq <- 250
acc.mdl <- WN(sigma2 = 1.535466e-04) + RW(gamma2 = 1.619511e-10)
gyr.mdl <- WN(sigma2 = 1.711080e-03) + RW(gamma2 = 1.532765e-13)
snsr.mdl$imu <- make_sensor(
  name = "imu", frequency = imu.freq,
  error_model1 = acc.mdl, error_model2 = gyr.mdl
)
gps.freq <- 1
gps.mdl.pos.hor <- WN(sigma2 = 2^2)
gps.mdl.pos.ver <- WN(sigma2 = 4^2)
gps.mdl.vel.hor <- WN(sigma2 = 0.04^2)
gps.mdl.vel.ver <- WN(sigma2 = 0.06^2)
snsr.mdl$gps <- make_sensor(
  name = "gps", frequency = gps.freq,
  error_model1 = gps.mdl.pos.hor,
  error_model2 = gps.mdl.pos.ver,
  error_model3 = gps.mdl.vel.hor,
  error_model4 = gps.mdl.vel.ver
)
baro.freq <- 1
baro.mdl <- WN(sigma2 = 0.5^2)
snsr.mdl$baro <- make_sensor(name = "baro", 
frequency = baro.freq,
 error_model1 = baro.mdl)
# sensor model for the KF------------------------
KF.mdl <- list()
KF.mdl$imu <- snsr.mdl$imu
KF.mdl$gps <- snsr.mdl$gps
KF.mdl$baro <- snsr.mdl$baro
# create navigation object------------------------
x1 <- navigation(
  traj.ref = traj,
  timing = timing,
  snsr.mdl = snsr.mdl,
  KF.mdl = KF.mdl,
  num.runs = num.runs
)
x2 <- navigation(
  traj.ref = traj,
  timing = timing,
  snsr.mdl = snsr.mdl,
  KF.mdl = KF.mdl,
  num.runs = num.runs
)
# compare navigation objects------------------------
compare.navigation(x1, x2,nsim = num.runs)
}
